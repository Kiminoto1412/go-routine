package watcher

import (
	"context"
	"fmt"
	"sync"
	"time"
)

type ProcessFlag int

const (
	FlagProcessing ProcessFlag = iota
	FlagDone
)

// Watcher ‡πÄ‡∏Å‡πá‡∏ö context ‡πÅ‡∏•‡∏∞ channel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
type Watcher struct {
	ctx         context.Context
	cancel      context.CancelFunc
	wg          sync.WaitGroup
	doneCh      chan struct{}
	processFlag ProcessFlag
	mu          sync.RWMutex
}

// NewWatcher ‡∏™‡∏£‡πâ‡∏≤‡∏á watcher ‡∏û‡∏£‡πâ‡∏≠‡∏° channel ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
func NewWatcher() *Watcher {
	ctx, cancel := context.WithCancel(context.Background())
	return &Watcher{
		ctx:         ctx,
		cancel:      cancel,
		doneCh:      make(chan struct{}, 1),
		processFlag: FlagProcessing,
	}
}

// Go ‡∏£‡∏±‡∏ô goroutine watcher
func (w *Watcher) Go(name string, fn func(ctx context.Context)) {
	w.wg.Add(1)
	go func() {
		defer w.wg.Done()
		fn(w.ctx)
		fmt.Println("üõë Goroutine", name, "exited")
	}()
}

// Stop ‡∏™‡πà‡∏á cancel ‡πÅ‡∏•‡∏∞‡∏£‡∏≠ goroutine ‡∏≠‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏î
func (w *Watcher) Stop() {
	w.cancel()
	w.wg.Wait()
	fmt.Println("‚úÖ All watchers stopped")
}

// SetProcessFlag ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ process flag
func (w *Watcher) SetProcessFlag(flag ProcessFlag) {
	w.mu.Lock()
	defer w.mu.Unlock()
	w.processFlag = flag
	fmt.Printf("üìä Process flag set to: %v\n", flag)
}

// GetProcessFlag ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤ process flag
func (w *Watcher) GetProcessFlag() ProcessFlag {
	w.mu.RLock()
	defer w.mu.RUnlock()
	return w.processFlag
}

// SignalDone ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì done
func (w *Watcher) SignalDone() {
	select {
	case w.doneCh <- struct{}{}:
		fmt.Println("üì¢ Done signal sent")
	default:
		// ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡∏£‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏ã‡πâ‡∏≥
	}
}

// StartTaskScheduler ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pattern 1: Task Scheduler
func (w *Watcher) StartTaskScheduler(countdownMinutes int, taskFn func()) {
	fmt.Printf("‚è∞ Starting task scheduler with %d minutes countdown\n", countdownMinutes)

	w.wg.Add(1)
	go func() {
		defer w.wg.Done()

		ticker := time.NewTicker(time.Duration(countdownMinutes) * time.Minute)
		defer ticker.Stop()

		for {
			select {
			case <-w.ctx.Done():
				fmt.Println("‚èπ Task scheduler stopped by context")
				return
			case <-ticker.C:
				fmt.Printf("‚è∞ Countdown finished after %d minutes\n", countdownMinutes)

				if w.GetProcessFlag() == FlagDone {
					fmt.Println("‚úÖ Process flag is Done ‚Üí spinning down")
					w.Stop()
					return
				} else {
					fmt.Println("‚ùå Process flag is not Done ‚Üí doing nothing")
					// Do nothing, continue waiting
				}
			}
		}
	}()

	// Start the task directly
	if taskFn != nil {
		w.wg.Add(1)
		go func() {
			defer w.wg.Done()
			taskFn()
		}()
	}
}

// StartKafkaProducer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pattern 2: Kafka Producer with Retry
func (w *Watcher) StartKafkaProducer(countdownMinutes int, message []byte, producerFn func(message []byte)) {
	fmt.Printf("üì® Starting Kafka producer with %d minutes retry interval\n", countdownMinutes)

	w.wg.Add(1)
	go func() {
		defer w.wg.Done()

		ticker := time.NewTicker(time.Duration(countdownMinutes) * time.Minute)
		defer ticker.Stop()

		// Start first attempt immediately
		if producerFn != nil && message != nil {
			fmt.Println("üì® Producing Kafka message (first attempt)")
			w.wg.Add(1)
			go func() {
				defer w.wg.Done()
				producerFn(message)
			}()
		}

		for {
			select {
			case <-w.ctx.Done():
				fmt.Println("‚èπ Kafka producer stopped by context")
				return
			case <-w.doneCh:
				fmt.Println("‚úÖ Received done signal ‚Üí ending")
				return
			case <-ticker.C:
				fmt.Printf("‚è∞ Retry interval finished after %d minutes\n", countdownMinutes)
				if producerFn != nil && message != nil {
					fmt.Println("üì® Producing Kafka message (retry)")
					w.wg.Add(1)
					go func() {
						defer w.wg.Done()
						producerFn(message)
					}()
				}
			}
		}
	}()
}
